/*
	1) 상태를 배열의 각 element로 하는 것이 아니라, row 혹은 col로 해야 한다.
	
	2) 문해기 수업처럼 check함수를 설계하는 것보다
	   체크배열을 이용하는 것이 시간복잡도를 줄일 수 있다.
	
	체크함수를 이용할 경우 : n개의 상태(row)에 대해, O(n^n^2)  체크 함수의 시간복잡도 n
	체크 배열을 이용할 경우 : n개의 상태(row)에 대해, O(n^n) 
	
	
*/

#include<iostream>
#include<cstdio>
#include<cstdlib>
using namespace std;

bool cdg1[50];	bool cdg2[50];	bool cc[50];
int n;	int sol;

int dg1(int i, int j) { return i + j; }
int dg2(int i, int j) { return (n-1) + (i-j); }

void DFS(int i)
{
	if (i == n)
	{
		sol++;
		return;
	}

	for (int j = 0; j < n; j++)
	{
		if (cc[j] == false && cdg1[dg1(i, j)] == false && cdg2[dg2(i, j)] == false)
		{
			cc[j] = true;  cdg1[dg1(i, j)] = true;  cdg2[dg2(i, j)] = true;
			DFS(i + 1);
			cc[j] = false;  cdg1[dg1(i, j)] = false;  cdg2[dg2(i, j)] = false;
		}
	}
}

int main()
{
	cin >> n;

	DFS(0);
	cout << sol;
	return 0;
}