#include <stdio.h>
#define SIZE 20

int mat[SIZE][SIZE];
int N, MAX_BLK;		


void DFS2(int n)
{
	int max,dir, i, j, pos;
	int save[SIZE][SIZE];	int rotate[SIZE][SIZE];

	if (n >= 5)
	{
		max = 0;
		for (i = 0; i < N; i++)
		{
			for (j = 0; j < N; j++)
				if (mat[i][j] > max)	max = mat[i][j];
		}

		if (max > MAX_BLK)	MAX_BLK = max;

		return;
	}

	for (dir = 0; dir <= 3; dir++)
	{
		// 반시계 90도 회전
		for (i = 0; i < N; i++)
		{
			for (j = 0; j < N; j++)
				rotate[N - j - 1][i] = mat[i][j];
		}

		for (i = 0; i < N; i++)
		{
			for (j = 0; j < N; j++)
				mat[i][j] = rotate[i][j];
		}

		// 회전은 골에 영향 no

		// MAT 상태 저장
		for (i = 0; i < SIZE; i++)
			for (j = 0; j < SIZE; j++)
				save[i][j] = mat[i][j];

		// MAT 갱신, 즉 수정 (DFS 영역)
		for (i = 0; i < N; i++)
		{
			pos = 0;
			for (j = 0; j < N; j++)
			{
				if (j == pos)	continue;

				if (mat[i][j] != 0)
				{
					if (mat[i][pos] == 0)
					{
						mat[i][pos] = mat[i][j];
						mat[i][j] = 0;
					}

					else
					{
						if (mat[i][j] != mat[i][pos])
						{
							pos++;
							mat[i][pos] = mat[i][j];
							mat[i][j] = 0;
						}

						else
						{
							mat[i][pos] += mat[i][j];
							mat[i][j] = 0;
							pos++;
						}
					}

				} //if
			} // for
		}
		// MAT 갱신 완료
		DFS2(n + 1);
		
		// MAT 상태 복구
		for (i = 0; i < SIZE; i++)
			for (j = 0; j < SIZE; j++)
				mat[i][j] = save[i][j];

	}
}

int main(void)
{
	int i, j;	
	scanf("%d", &N);

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N; j++)
		{
			scanf("%d", &mat[i][j]);
		}
	}

	DFS2(0);
	printf("%d", MAX_BLK);

	return 0;
}