#define INF 0x7fffffff 		// INT 최대값
#define MAXQ 110*110*110	// 배열 크기 제한


QUEUE Que[MAXQ];
int dp, ep;			// deque,enque point


typedef struct
{
	int r, c;		// 큐 원소의 수
	
}QUEUE;



int N;				// 배열의 크기제한
int map[110][110];
int sum[110][110];		// 각 위치의 최선 값

int dr[] = {-1, 1, 0, 0}	// 변위 테이블
int dc[] = {0, 0, -1, 1}



int Enq(int r, int c)
{
	if(ep == MAXQ)	return 0;		// 실패시 0 반환

	Que[ep].r = r;
	Que[ep].c = c;

	ep++;
	
	return 1;
}

int Deq(QUEUE *q)
{
	if(ep == dp)	return 0;

	*q = Que[dp++]

	return 1;
} 




void Input_Data(void)
{
	int i, j;

	scanf("%d", &N);
	for(i = 1; i<= N; i++)
	{
		for(j = 1; j <= N; j++)
		{
			scanf("%1d", &map[i][j]);
			sum[i][j] = INF;
		}
	}
	
}

int main(void)
{
	int sol;
	Input_Data();	

	sol = /* 문제풀이 함수 */
	printf("%d", sol);

	return 0;
}



// BFS 구현

int BFS(void)
{
	
	int r, c, rr, cc;
	int i, cur_sum;
	QUEUE q;	
	
	sum[1][1] = map[1][1];
	Enq(1,1);	

	while(Deq(&q))
	{
		r = q.r, c = q.c;	// 2. Deq()
		cur_sum = sum[r][c];

		for(i = 0 ; i < 4 ; i++)
		{
			rr = r + dr[i], cc = c + dc[i];		// 다음 위치 연산
			
			if( rr >= 1 && rr <= N && cc >= 1 && cc <= N)	// 좌표 유효성 검사
			{
				if( sum[rr][cc] > cur_sum + map[rr][cc])
				{
					sum[rr][cc] = cur_sum + map[rr][cc];
					Enq(rr,cc);
				}	
			}

		}
				
	}

	return sum[N][N];
}













