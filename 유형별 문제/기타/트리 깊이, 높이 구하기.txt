#include <iostream>
#include <algorithm>
#include<string>
#include<cctype>
#include <ctime>
#include <cstdlib>
#include<cstring>
#include<climits>
using namespace std;

struct Node {

	int val;
	Node* left;
	Node* right;
};

Node* make_node(int val)
{
	Node* temp = (Node*)malloc(sizeof(Node));
	temp->val = val;
	temp->left = NULL;
	temp->right = NULL;

	return temp;
}

int count_tree(Node* head)
{
	if (head != NULL)
	{
		return count_tree(head->left) + count_tree(head->right) + 1;
	}

	else	return 0;
}

int get_depth(Node* head, int key)
{
	if (head != NULL)
	{
		if (head->val == key)
		{
			return 0;
		}

		else   return max(get_depth(head->left, key), get_depth(head->right, key)) + 1;
	}

	else  return INT_MIN;
	
}

int get_height(Node* head)
{
	if (head != NULL)
	{
		return max(get_height(head->left), get_height(head->right)) + 1;
	}

	else	return 0;

}

int main(void)
{
	Node* head = make_node(5);
	head->left = make_node(18);
	head->right = make_node(2);
	head->left->left = make_node(-4);
	head->left->left->right = make_node(5);
	head->left->right = make_node(6);
	head->left->left->left = make_node(7);
	head->left->left->left->left = make_node(8);
	cout << "노드의 수 : " << count_tree(head) << endl;
	cout << "트리의 높이 : " << get_height(head->right) << endl;

	cout << "x를 입력하세요 : ";
	int x;
	cin >> x;
	cout << "x의 깊이 : " << get_depth(head, x) << endl;
	
	return 0;
}
