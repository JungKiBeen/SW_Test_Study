/*
	1. 최악의 경우라도 시간복잡도가 9^81은 되지 않는다.
	일단, check함수 가지치기에 의해 9가지 경우의 수중 많이 잘린다.

	2. 스도쿠가 완성되기 위해서는 최소 절반 이상은 채워져 있어야 한다.

*/


#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;

struct zero
{
	int i, j;
};

zero a[81];	int znum;
int mat[9][9];
bool flag;

bool check(int i, int j, int val)
{
	for (int k = 0; k < 9; k++)
	{
		if (mat[i][k] == val || mat[k][j] == val)	return false;
	}

	int fi = i - (i % 3);
	int fj = j - (j % 3);

	for (int t = fi; t < fi + 3; t++)
	{
		for (int s = fj; s < fj + 3; s++)
		{
			if (mat[t][s] == val)	return false;
		}
	}

	return true;
}

void DFS(int n)
{
	if (n >= znum)
	{
		flag = true;
		return;
	}

	for (int i = 1; i <= 9; i++)
	{
		if (check(a[n].i, a[n].j, i) == true)
		{
			mat[a[n].i][a[n].j] = i;
			DFS(n + 1);
			if (flag == true)	return;
			mat[a[n].i][a[n].j] = 0;
		}
	}
}

int main()
{
	//freopen("a.txt", "r", stdin);

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			scanf("%d", &mat[i][j]);
			if (mat[i][j] == 0)
			{
				zero temp;
				temp.i = i; temp.j = j;
				a[znum] = temp;
				znum++;
			}
		}
	}

	DFS(0);

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			if (j == 8)
			{
				printf("%d\n", mat[i][j]);
				continue;
			}
			printf("%d ", mat[i][j]);
		}
	}

	
	return 0;
}