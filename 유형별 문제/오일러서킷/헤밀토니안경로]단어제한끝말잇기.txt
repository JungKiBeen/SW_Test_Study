#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;


bool make_adj(vector<string> &words, vector<vector<int> >& adj)
{
	int no_indegree = 0;
	for (int i = 0; i <(int)words.size(); ++i)
	{
		int in_degree = 0;
		for (int j = 0; j < (int)words.size(); ++j)
		{
			if ((i != j) && (words[i][0] == words[j][words[j].size() - 1]))		// 정점 i와 정점 j는 인접하다.
			{
				adj[j].push_back(i);		// 방향 그래프
				in_degree++;
			}
		}	
		if (in_degree == 0)
			no_indegree++;
	}
	return (no_indegree != 2);
}


//visited
bool flag;
void dfs(int here, int cnt, const int n, vector<bool> &visited, vector<vector<int> > &adj, vector<int>& path)
{
	if (cnt == n)
	{
		flag = true;	path.push_back(here);
		return;
	}

	vector<int> ::iterator there;
	for(there = adj[here].begin(); there != adj[here].end(); there++ )
		if (!visited[*there])
		{
			visited[*there] = true;
			dfs(*there, cnt + 1, n, visited, adj, path);
			if (flag)
			{	
				path.push_back(here);
				return;
			}
			visited[*there] = false;
		}
}

void printPath(vector<int> &path, vector<string> &words)
{
	std::ios_base::sync_with_stdio(false);
	for (int i = 0; i < (int)path.size(); ++i)
		cout << words[path[i]] << " ";

	cout << "\n";
}

int main(void)
{
	std::ios_base::sync_with_stdio(false);
	freopen("input.txt", "r", stdin);
	int T;	cin >> T;

	while (T--)
	{
		flag = false;
		int n;			cin >> n;
		vector<vector<int> > adj(n, vector<int>());	// 인접 행렬
		vector<string> words(n);
		vector<bool> visited(n);
		vector<int> path;


		for (int i = 0; i < n; ++i)
			cin >> words[i];

		if (!make_adj(words, adj))
		{
			cout << "IMPOSSIBLE\n";
			continue;
		}

		for (int here = 0; here < n; here++)
		{
			visited[here] = true;
			dfs(here, 1, n, visited, adj, path);
			if (flag)
			{
				reverse(path.begin(), path.end());
				printPath(path, words);
				break;
			}
			visited[here] = false;
		}
	}

	return 0;
}

