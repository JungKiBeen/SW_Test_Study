#include <iostream>
#include <algorithm>
#include<string>

#include<cctype>
#include <ctime>
#include <cstdlib>
#include<cstring>
#include<climits>

using namespace std;


struct Node
{
	int val;
	Node* prev;
	Node* next;
};


struct linked_list
{
	Node* head;
	int cnt;
};

void del_node(Node* del)
{
	Node* prev = del->prev;
	Node* next = del->next;

	prev->next = del->next;
	next->prev = del->prev;

	del->next = NULL;
	del->prev = NULL;
	free(del);
}

void solution(int n, int k)
{
	Node* prev = NULL, *cur = NULL, *next = NULL;
	linked_list ls;


	ls.head = cur = (Node*)malloc(sizeof(Node));
	cur->val = 1;

	for (int i = 2; i <= n; i++)
	{
		prev = cur;
		cur = (Node*)malloc(sizeof(Node));
		cur->val = i;
		cur->prev = prev;
		prev->next = cur;
	}

	cur->next = ls.head;
	ls.head->prev = cur;
	ls.cnt = n;

	while (ls.cnt > 2)
	{
		Node* del = ls.head;
		ls.head = ls.head->prev;

		del_node(del);
		ls.cnt--;

		for (int i = 0; i < k; i++)
		{
			ls.head = ls.head->next;
		}
	}

	if (ls.head->val > ls.head->next->val)
	{
		printf("%d %d\n", ls.head->next->val, ls.head->val);
	}

	else
	{
		printf("%d %d\n", ls.head->val, (ls.head->next)->val);
	}
}

int main(void)
{
	int c;
	cin >> c;

	while (c--)
	{
		int n, k;
		cin >> n >> k;

		solution(n, k);
	}
	
	return 0;
}
