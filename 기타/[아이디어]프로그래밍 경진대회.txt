해당 문제는 최종라운드에서 점수를 받고 우승할 가능성이 있는 응시자의 수를 요구합니다.
즉, 각 응시자들이 어떠한 점수를 받던지간에 해당 응시자가 우승할 가능성이 1%라도 있다면 예비 우승자에 포함됩니다.
응시자들이 다양한 점수를 받을수 있지만 해당 응시자가 예비 우승자에 포함되지 못할 경우는 마지막 라운드에서의 최고점수가 최소가 되는 득점상황의 최고점수 보다 낮은 경우입니다.
마지막 라운드에서 각 응시자가 점수를 받았는데 최고점수가 최소가 되는 경우는 1등이 1점을 받고 2등이 2점을 받으면서 N등이 N점을 받는 경우입니다.
if n_score + n < max({n_rank + n , ... , 1_rank + 1}) => cannot be winner
각 응시자의 rank에 맞는 점수를 주기 위해서는 점수를 크기순으로 정렬하고 1~N 혹은 N~1씩 더해주어 최고점수가 최소가 되는 득점상황을 만들고 이중 최고점수를 구해냅니다.
우승을 판단할 수 있는 기준점수(위 득점상황의 최고점수)를 구해냈으므로 각 응시자가 최고점을 받았을때 기준점수보다 크기만 하면 해당 응시자는 우승할 가능성이 없지 않습니다.(우승할 가능성이 있습니다.) 이렇게 우승 가능성이 응시자의 수를 구하는 문제 입니다.









#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
int T, N,SOL, P[300000 + 10], MAX[300000 + 10]; 

int compare(const void* a, const void* b)
{
	if (*(int*)a > *(int*)b)
		return 1;
	
	else if (*(int*)a < *(int*)b)
		return -1;

	else return 0;
}

int main(void)
{
	setbuf(stdout, NULL);
	int i, max= 0, temp, offset, TC, test_case;

	scanf("%d", &TC);
	for (test_case = 1; test_case <= TC; test_case++)
	{
		SOL = 0;	offset = 1;
		scanf("%d", &N); 
		for (i = 1; i <= N; i++) { scanf("%d", &P[i]);}
		qsort(P, N + 1, sizeof(P[0]), compare);
	
		for (i = N; i >= 1; i--)
		{
			temp = P[i] + offset;
			if (temp > max) max = temp;
			MAX[i] =  max;
			offset++;
		}
		for (i = 1; i <= N; i++)
		{
			if (P[i] + N >= MAX[i + 1]) SOL++;
		}

		printf("Case #%d\n", test_case);
		printf("%d\n", SOL);
	}
	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
